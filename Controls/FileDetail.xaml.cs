using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MVA_Poe.Controls
{/// <summary>
 /// Interaction logic for FileDetail.xaml
 /// </summary>
    public partial class FileDetail : UserControl // Defines a partial class named FileDetail that inherits from UserControl
    {
        // Declare a public boolean variable named 'closed'
        public bool closed;

        // Constructor for the FileDetail class
        public FileDetail()
        {
            // Initialize the component (generated by XAML)
            InitializeComponent();
        }

        // Property: FileName
        // Gets or sets the file name
        public string FileName
        {
            get { return (string)GetValue(FileNameProperty); }
            set { SetValue(FileNameProperty, value); }
        }

        // Using a DependencyProperty as the backing store for FileName. This enables animation, styling, binding, etc ...
        public static readonly DependencyProperty FileNameProperty =
        DependencyProperty.Register("FileName", typeof(string), typeof(FileDetail));

        // Property: FileSize
        // Gets or sets the file size
        public string FileSize
        {
            get { return (string)GetValue(FileSizeProperty); }
            set { SetValue(FileSizeProperty, value); }
        }

        // Using a DependencyProperty as the backing store for FileSize. This enables animation, styling, binding, etc ...
        public static readonly DependencyProperty FileSizeProperty =
          DependencyProperty.Register("FileSize", typeof(string), typeof(FileDetail));

        // Property: UploadProgress
        // Gets or sets the upload progress
        public int UploadProgress
        {
            get { return (int)GetValue(UploadProgressProperty); }
            set { SetValue(UploadProgressProperty, value); }
        }

        // Using a DependencyProperty as the backing store for UploadProgress. This enables animation, styling, binding, etc ...
        public static readonly DependencyProperty UploadProgressProperty =
            DependencyProperty.Register("UploadProgress", typeof(int), typeof(FileDetail));

        // Property: UploadSpeed
        // Gets or sets the upload speed
        public int UploadSpeed
        {
            get { return (int)GetValue(UploadSpeedProperty); }
            set { SetValue(UploadSpeedProperty, value); }
        }

        // Using a DependencyProperty as the backing store for UploadSpeed. This enables animation, styling, binding, etc ...
        public static readonly DependencyProperty UploadSpeedProperty =
            DependencyProperty.Register("UploadSpeed", typeof(int), typeof(FileDetail));

        // Event handler for the button click event
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            // Set the visibility of the control to Collapsed
            this.Visibility = Visibility.Collapsed;
            // Set the 'closed' variable to true
            closed = true;
        }
    }
}

//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____-