using MVA_Poe;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace MVA_poe
{
    /// <summary>
    /// Interaction logic for Loading.xaml
    /// </summary>
    public partial class Loading : Window
    {
        // Declare a public static integer variable named 'progress'
        public static int progress = 0;

        // Constructor for the Loading class
        public Loading()
        {
            // Initialize the component (generated by XAML)
            InitializeComponent();

            // Update the progress bar with the current progress value
            UpdateProgress(progress);
        }

        //----------------------------------------------------------------------------//

        // Event handler for the ContentRendered event of the window
        private void Window_ContentRendered(object sender, EventArgs e)
        {
            // Create a new BackgroundWorker instance
            BackgroundWorker worker = new BackgroundWorker();

            // Enable progress reporting for the worker
            worker.WorkerReportsProgress = true;

            // Subscribe to the DoWork event
            worker.DoWork += worker_DoWork;

            // Subscribe to the ProgressChanged event
            worker.ProgressChanged += worker_ProgressChanged;

            // Start the worker asynchronously
            worker.RunWorkerAsync();
        }

        //----------------------------------------------------------------------------//

        // Method: worker_DoWork
        // Performs the background work
        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            // Loop from 0 to 99
            for (int i = 0; i < 100; i++)
            {
                // Report the progress
                (sender as BackgroundWorker).ReportProgress(i);

                // Sleep for 80 milliseconds
                System.Threading.Thread.Sleep(80);
            }
        }

        //----------------------------------------------------------------------------//

        // Method: worker_ProgressChanged
        // Updates the progress bar when progress changes
        public void worker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // Set the progress bar value to the progress percentage
            progressBar.Value = e.ProgressPercentage;
        }

        //----------------------------------------------------------------------------//

        // Method: UpdateProgress
        // Updates the progress bar with the given value
        public void UpdateProgress(int value)
        {
            // Set the progress variable to the given value
            progress = value;

            // Set the progress bar value to the progress variable
            progressBar.Value = progress;
        }
    }
}

//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____---____---____---____---__\\