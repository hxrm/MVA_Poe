using MVA_poe;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Interop;

namespace MVA_Poe
{
    public partial class MainWindow : Window
    {
        // Instance of DBHelper
        DBHelper dBHelper;

        // Constructor for MainWindow
        public MainWindow(DBHelper db)
        {
            // Initialize the components (generated by XAML)
            InitializeComponent();
            this.WindowState = WindowState.Maximized;

            // Set the language based on the DBHelper.lang value
            SetLanguage(DBHelper.lang);

            // Assign the passed DBHelper instance to the class member
            this.dBHelper = db;

            // Check if the frame container has no current source
            if (fContainer.CurrentSource == null)
            {
                // Navigate to the Dashboard page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
        }

        //----------------------------------------------------------------------------//

        // Method: SetLanguage
        // Sets the language for the application based on the culture code
        private void SetLanguage(string cultureCode)
        {
            // Set the current UI culture to the specified culture code
            CultureInfo.CurrentUICulture = new CultureInfo(cultureCode);

            // Create a new ResourceDictionary instance
            ResourceDictionary dict = new ResourceDictionary();

            // Switch based on the culture code
            switch (cultureCode)
            {
                case "af":
                    // Set the source to the Afrikaans resource file
                    dict.Source = new Uri("Resources/Strings.af.xaml", UriKind.Relative);
                    break;
                case "isx":
                    // Set the source to the Icelandic resource file
                    dict.Source = new Uri("Resources/Strings.isx.xaml", UriKind.Relative);
                    break;
                default:
                    // Set the source to the English resource file
                    dict.Source = new Uri("Resources/Strings.en.xaml", UriKind.Relative);
                    break;
            }

            // Add the resource dictionary to the merged dictionaries
            this.Resources.MergedDictionaries.Add(dict);
        }

        //----------------------------------------------------------------------------//

        // Event handler for the background preview mouse left button down event
        private void BG_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            // Uncheck the toggle button
            Tg_Btn.IsChecked = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse enter on btnCreateReport
        private void btnCreateReport_MouseEnter(object sender, MouseEventArgs e)
        {
            // If the toggle button is not checked
            if (Tg_Btn.IsChecked == false)
            {
                // Set the placement target and mode for the popup
                Popup.PlacementTarget = btnCreateReport;
                Popup.Placement = PlacementMode.Right;

                // Open the popup
                Popup.IsOpen = true;

                // Set the popup text
                Header.PopupText.Text = (string)FindResource("CreateNewReport");
            }
        }

        // Event handler for mouse leave on btnCreateReport
        private void btnCreateReport_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse enter on btnViewReport
        private void btnViewReport_MouseEnter(object sender, MouseEventArgs e)
        {
            // If the toggle button is not checked
            if (Tg_Btn.IsChecked == false)
            {
                // Set the placement target and mode for the popup
                Popup.PlacementTarget = btnViewReport;
                Popup.Placement = PlacementMode.Right;

                // Open the popup
                Popup.IsOpen = true;

                // Set the popup text
                Header.PopupText.Text = (string)FindResource("Reports");
            }
        }

        // Event handler for mouse leave on btnViewReport
        private void btnViewReport_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse enter on btnLocal
        private void btnLocal_MouseEnter(object sender, MouseEventArgs e)
        {
            // If the toggle button is not checked
            if (Tg_Btn.IsChecked == false)
            {
                // Set the placement target and mode for the popup
                Popup.PlacementTarget = btnLocal;
                Popup.Placement = PlacementMode.Right;

                // Open the popup
                Popup.IsOpen = true;

                // Set the popup text
                Header.PopupText.Text = (string)FindResource("LocalEvents");
            }
        }

        // Event handler for mouse leave on btnLocal
        private void btnLocal_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse leave on btnServiceRequest
        private void btnServiceRequest_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        // Event handler for mouse enter on btnServiceRequest
        private void btnServiceRequest_MouseEnter(object sender, MouseEventArgs e)
        {
            // If the toggle button is not checked
            if (Tg_Btn.IsChecked == false)
            {
                // Set the placement target and mode for the popup
                Popup.PlacementTarget = btnServiceRequest;
                Popup.Placement = PlacementMode.Right;

                // Open the popup
                Popup.IsOpen = true;

                // Set the popup text
                Header.PopupText.Text = (string)FindResource("ServiceRequest");
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse leave on btnPointOfSale
        private void btnPointOfSale_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse enter on btnLogout
        private void btnLogout_MouseEnter(object sender, MouseEventArgs e)
        {
            // If the toggle button is not checked
            if (Tg_Btn.IsChecked == false)
            {
                // Set the placement target and mode for the popup
                Popup.PlacementTarget = btnLogout;
                Popup.Placement = PlacementMode.Right;

                // Open the popup
                Popup.IsOpen = true;

                // Set the popup text
                Header.PopupText.Text = (string)FindResource("Logout");
            }
        }

        // Event handler for mouse leave on btnLogout
        private void btnLogout_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for mouse enter on btnProfile
        private void btnProfile_MouseEnter(object sender, MouseEventArgs e)
        {
            // If the toggle button is not checked
            if (Tg_Btn.IsChecked == false)
            {
                // Set the placement target and mode for the popup
                Popup.PlacementTarget = btnProfile;
                Popup.Placement = PlacementMode.Right;

                // Open the popup
                Popup.IsOpen = true;

                // Set the popup text
                Header.PopupText.Text = (string)FindResource("Profile");
            }
        }

        // Event handler for mouse leave on btnProfile
        private void btnProfile_MouseLeave(object sender, MouseEventArgs e)
        {
            // Hide the popup
            Popup.Visibility = Visibility.Collapsed;
            Popup.IsOpen = false;
        }

        //----------------------------------------------------------------------------//

        // Event handler for the close button click event
        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            // Close the window
            Close();
        }

        //----------------------------------------------------------------------------//

        // Event handler for the restore button click event
        private void btnRestore_Click(object sender, RoutedEventArgs e)
        {
            // Toggle between normal and maximized window state
            if (WindowState == WindowState.Normal)
                WindowState = WindowState.Maximized;
            else
                WindowState = WindowState.Normal;
        }

        // Event handler for the minimize button click event
        private void btnMinimize_Click(object sender, RoutedEventArgs e)
        {
            // Minimize the window
            WindowState = WindowState.Minimized;
        }
        // End: Button Close | Restore | Minimize

        //----------------------------------------------------------------------------//

        // Event handler for the report button click event
        private void btnReport_Click(object sender, RoutedEventArgs e)
        {
            // Check if the current page is not the CreateReport page
            if (fContainer.CurrentSource == null || !fContainer.CurrentSource.OriginalString.EndsWith("CreateReport.xaml"))
            {
                // Navigate to the CreateReport page
                fContainer.Navigate(new System.Uri("Pages/CreateReport.xaml", UriKind.Relative));
            }
            // If the current page is the CreateReport page
            else if (fContainer.CurrentSource.OriginalString.EndsWith("CreateReport.xaml"))
            {
                // Navigate to the Dashboard page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for the view report button click event
        private void btnViewReport_Click(object sender, RoutedEventArgs e)
        {
            // Check if the current page is not the ViewReport page
            if (fContainer.CurrentSource == null || !fContainer.CurrentSource.OriginalString.EndsWith("ViewReport.xaml"))
            {
                // Navigate to the ViewReport page
                fContainer.Navigate(new System.Uri("Pages/ViewReport.xaml", UriKind.Relative));
            }
            // If the current page is the ViewReport page
            else if (fContainer.CurrentSource.OriginalString.EndsWith("ViewReport.xaml"))
            {
                // Navigate to the Dashboard page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for the profile button click event
        private void btnProfile_Click(object sender, RoutedEventArgs e)
        {
            // Check if the current page is not the Profile page
            if (fContainer.CurrentSource == null || !fContainer.CurrentSource.OriginalString.EndsWith("Profile.xaml"))
            {
                // Navigate to the Profile page
                fContainer.Navigate(new System.Uri("Pages/Profile.xaml", UriKind.Relative));
            }
            // If the current page is the Profile page
            else if (fContainer.CurrentSource.OriginalString.EndsWith("Profile.xaml"))
            {
                // Navigate to the Dashboard page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for the logout button click event
        private void btnLogout_Click(object sender, RoutedEventArgs e)
        {
            // Reset the user ID in DBHelper
            DBHelper.userID = 0;

            // Create a new instance of the Auth window
            Auth auth = new Auth();

            // Show the Auth window
            auth.Show();

            // Close the current window
            Window.GetWindow(this).Close();
        }

        //----------------------------------------------------------------------------//

        // Import the ReleaseCapture function from user32.dll
        [DllImport("user32.DLL", EntryPoint = "ReleaseCapture")]
        private extern static void ReleaseCapture();

        // Import the SendMessage function from user32.dll
        [DllImport("user32.DLL", EntryPoint = "SendMessage")]
        private extern static void SendMessage(System.IntPtr hWnd, int wMsg, int wParam, int lParam);

        //----------------------------------------------------------------------------//

        // Event handler for the border mouse down event
        private void Border_MouseDown(object sender, MouseButtonEventArgs e)
        {
            // Check if the left mouse button was pressed
            if (e.ChangedButton == MouseButton.Left)
            {
                // Release the mouse capture
                ReleaseCapture();

                // Get the window handle
                IntPtr windowHandle = new WindowInteropHelper(this).Handle;

                // Send a message to move the window
                SendMessage(windowHandle, 0x112, 0xf012, 0);
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for the local button click event
        private void btnLocal_Click(object sender, RoutedEventArgs e)
        {
            // Check if the current page is not the Events page
            if (fContainer.CurrentSource == null || !fContainer.CurrentSource.OriginalString.EndsWith("Events.xaml"))
            {
                // Navigate to the Events page
                fContainer.Navigate(new System.Uri("Pages/Rec.xaml", UriKind.Relative));
            }
            // If the current page is the Events page
            else if (fContainer.CurrentSource.OriginalString.EndsWith("Events.xaml"))
            {
                // Navigate to the Dashboard page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for the service request button click event
        private void btnServiceRequest_Click(object sender, RoutedEventArgs e)
        {
            // Check if the current page is not the Service page
            if (fContainer.CurrentSource == null || !fContainer.CurrentSource.OriginalString.EndsWith("Service.xaml"))
            {
                // Navigate to the Service page
                fContainer.Navigate(new System.Uri("Pages/Service.xaml", UriKind.Relative));
            }
            // If the current page is the Service page
            else if (fContainer.CurrentSource.OriginalString.EndsWith("Service.xaml"))
            {
                // Navigate to the Dashboard page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            // Check if the current page is not the Service page
            if (fContainer.CurrentSource == null || !fContainer.CurrentSource.OriginalString.EndsWith("Dashboard.xaml"))
            {
                // Navigate to the Service page
                fContainer.Navigate(new System.Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
          
           
        }
    }
}

//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____---____---____---____---__