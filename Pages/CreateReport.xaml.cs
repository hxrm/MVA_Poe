using Microsoft.Win32;
using MVA_poe;
using MVA_Poe.Classes;
using MVA_Poe.Data;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MVA_Poe.Controls;
using System.Collections.ObjectModel;
using System.Collections;
using System.Runtime.InteropServices.ComTypes;
using MVA_poe.Classes;
using System.Reflection;
using System.Runtime.InteropServices;

namespace MVA_Poe.Pages
{
    /// <summary>
    /// Interaction logic for CreateReport.xaml
    /// </summary>
    public partial class CreateReport : Page
    {
        // Declare an instance of AppDbContext
        AppDbContext context;

        // Declare boolean variables for validation
        bool validReport, validAttachment;

        // Declare an ObservableCollection for file details
        public ObservableCollection<FileDetail> AttachListItems { get; set; }

        // Declare a list to hold attachments
        List<Attachment> attachments = new List<Attachment>();

        // Declare a Report object
        Report report;

        // Declare an instance of the Valid class
        Valid v = new Valid();

        // Declare boolean variables for field validation
        bool validPWord, validEMail, validFName, validTitle, validID, validLoc;

        // Declare a string for error messages
        string tErrorMessage;

        // Constructor for the CreateReport class
        public CreateReport()
        {
            // Initialize the component (generated by XAML)
            InitializeComponent();

            // Populate the category combo box
            PopulateCategoryComboBox();

            // Set the language based on the DBHelper.lang value
            SetLanguage(DBHelper.lang);

            // Initialize the AttachListItems collection
            AttachListItems = new ObservableCollection<FileDetail>();

            // Create and initialize a BitmapImage
            BitmapImage image = new BitmapImage();
            image.BeginInit();
            image.UriSource = new Uri("C:\\Users\\User\\Downloads\\Android Icons  (8).png");
            image.EndInit();

            // Initialize the AppDbContext instance
            context = new AppDbContext();
        }

        //----------------------------------------------------------------------------//

        // Method: SetLanguage
        // Sets the language for the application based on the culture code
        private void SetLanguage(string cultureCode)
        {
            // Set the current UI culture to the specified culture code
            CultureInfo.CurrentUICulture = new CultureInfo(cultureCode);

            // Create a new ResourceDictionary instance
            ResourceDictionary dict = new ResourceDictionary();

            // Switch based on the culture code
            switch (cultureCode)
            {
                case "af":
                    // Set the source to the Afrikaans resource file
                    dict.Source = new Uri("Resources/Strings.af.xaml", UriKind.Relative);
                    break;
                default:
                    // Set the source to the English resource file
                    dict.Source = new Uri("Resources/Strings.en.xaml", UriKind.Relative);
                    break;
            }

            // Add the resource dictionary to the merged dictionaries
            this.Resources.MergedDictionaries.Add(dict);
        }

        //----------------------------------------------------------------------------//

        // Method: PopulateCategoryComboBox
        // Populates the category combo box with values from the ReportCategory enum
        private void PopulateCategoryComboBox()
        {
            // Iterate through each value in the ReportCategory enum
            foreach (var category in Enum.GetValues(typeof(ReportCategory)))
            {
                // Format the category name and add it to the combo box
                string catItem = System.Text.RegularExpressions.Regex.Replace(category.ToString(), "(\\B[A-Z])", " $1");
                cmbCategory.Items.Add(catItem);
            }
        }

        //----------------------------------------------------------------------------//

        // Method: GetSelectedCategory
        // Returns the selected category from the combo box
        private ReportCategory GetSelectedCategory()
        {
            // Check if an item is selected in the combo box
            if (cmbCategory.SelectedItem != null)
            {
                // Get the selected category and parse it to the ReportCategory enum
                string selectedCategory = cmbCategory.SelectedItem.ToString().Replace(" ", "");
                return (ReportCategory)Enum.Parse(typeof(ReportCategory), selectedCategory);
            }
            // Return the default category if none is selected
            return ReportCategory.Other;
        }

        //----------------------------------------------------------------------------//

        // Method: GetDescriptionText
        // Returns the text from a RichTextBox
        private string GetDescriptionText(RichTextBox rtb)
        {
            // Create a TextRange for the content of the RichTextBox
            TextRange textRange = new TextRange(rtb.Document.ContentStart, rtb.Document.ContentEnd);
            // Return the text from the TextRange
            return textRange.Text;
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Submit button click event
        private void btnSubmit_Click(object sender, RoutedEventArgs e)
        {
            // Get the input values from the form
            string title = txtTitle.Text;
            ReportCategory category = GetSelectedCategory();
            string description = GetDescriptionText(txtDescrip);
            string location = txtLocation.Text;

            // Check if any required fields are empty
            if (InputCheck(title, description, location))
            {
                // Show an error message if any fields are empty
                MessageBox.Show("\n\n     Please fill in all the required fields.    \n\n");
                return;
            }

            // Validate the title and show error message if invalid
            validTitle = v.TryReceiveString(title, out tErrorMessage);
            reporTitleError.Text = tErrorMessage;
            reporTitleError.Visibility = Visibility.Visible;

            // Create a report object
            report = AddReport(title, category, description, location);

            // Save the report to the database
            SaveToDB();
        }

        //----------------------------------------------------------------------------//

        // Method: InputCheck
        // Checks if any of the provided fields are empty
        private bool InputCheck(params string[] fields)
        {
            // Iterate through each field
            foreach (var field in fields)
            {
                // Return true if any field is empty
                if (string.IsNullOrEmpty(field))
                {
                    return true;
                }
            }
            // Return false if all fields are filled
            return false;
        }

        //----------------------------------------------------------------------------//

        // Method: SaveToDB
        // Saves the report and attachments to the database
        private void SaveToDB()
        {
            // Check if the report and attachments are valid
            if (validReport && validAttachment)
            {
                // Add the report to the database
                context.Reports.Add(report);
                context.SaveChanges();

                // Call the Test method
                Test();

                // Set the reportID for each attachment and save them to the database
                foreach (var attachment in attachments)
                {
                    attachment.reportID = report.reportID; // Set the foreign key
                    context.Attachments.Add(attachment);
                }
                context.SaveChanges();

                // Show a success message
                MessageBox.Show("\n\n    Report submitted successfully!    \n\n");

                // Navigate to the Dashboard page
                this.NavigationService.Navigate(new Uri("Pages/Dashboard.xaml", UriKind.Relative));
            }
            else
            {
                // Show an error message if the report or attachments are invalid
                MessageBox.Show("\n\n     Please fill in all the required fields.    \n\n");
            }
        }

        //----------------------------------------------------------------------------//

        // Method: Test
        // Removes closed attachments from the list
        private void Test()
        {
            // Get the count of attachments
            int count = AttachListItems.Count;

            // Iterate through each attachment
            for (int i = 0; i < count; i++)
            {
                // Remove closed attachments from the list
                if (AttachListItems[i].closed)
                {
                    attachments.Remove(attachments.Find(x => x.FileName == AttachListItems[i].FileName));
                }
            }
        }

        //----------------------------------------------------------------------------//

        // Method: AddReport
        // Creates and returns a new Report object
        private Report AddReport(string t, ReportCategory c, string d, string l)
        {
            // Create a new Report object
            var newReport = new Report
            {
                userId = DBHelper.userID,
                reportName = t,
                reportCat = c,
                reportDesc = d,
                reportDate = DateTime.Now,
                reportLoc = l
            };

            // Set the validReport flag to true
            validReport = true;

            // Return the new Report object
            return newReport;
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Load button click event
        private void btnLoad_Click(object sender, RoutedEventArgs e)
        {
            // Call the LoadAndDisplayFiles method
            LoadAndDisplayFiles();
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Upload button click event
        private void btnUpload_Click(object sender, RoutedEventArgs e)
        {
            // Create and configure an OpenFileDialog
            OpenFileDialog openFile = new OpenFileDialog
            {
                Multiselect = true, // Allow multiple file selection
                Filter = "Image and Document files (*.png;*.jpeg;*.jpg;*.pdf;*.docx;*.txt)|*.png;*.jpeg;*.jpg;*.pdf;*.docx;*.txt|All files (*.*)|*.*",
            };

            // Show the file dialog and get the response
            bool? response = openFile.ShowDialog();

            // Check if the user selected files
            if (response == true)
            {
                // Get the selected file names
                string[] files = openFile.FileNames;

                // Iterate through each selected file
                for (int i = 0; i < files.Length; i++)
                {
                    // Get the file name and file info
                    string filename = System.IO.Path.GetFileName(files[i]);
                    FileInfo fileInfo = new FileInfo(files[i]);
                    byte[] fileContent = File.ReadAllBytes(files[i]);

                    // Create a FileDetail object and add it to the list
                    var fileDetail = new FileDetail()
                    {
                        FileName = filename,
                        // Convert bytes to MB => bytes / 1.049e+6
                        FileSize = string.Format("{0} {1}", (fileInfo.Length / 1.049e+6).ToString("0.0"), "Mb"),
                        UploadProgress = 100
                    };

                    // Add the file detail to the UI and the collection
                    UploadingFilesList.Items.Add(fileDetail);
                    AttachListItems.Add(fileDetail);

                    // Create an Attachment object and add it to the list
                    var attach = new Attachment
                    {
                        FileName = filename,
                        FileSize = fileInfo.Length / 1.049e+6, // Convert bytes to MB
                        FileContent = fileContent
                    };
                    attachments.Add(attach);

                    // Set the validAttachment flag to true
                    validAttachment = true;
                }

                // Show a message indicating the number of uploaded files
                if (files.Length < 1)
                {
                    MessageBox.Show("\n\n    " + files.Length.ToString() + " media attachment uploaded.    \n\n");
                }
                else
                {
                    MessageBox.Show("\n\n    " + files.Length.ToString() + " media attachments uploaded.    \n\n");
                }
            }
        }

        //----------------------------------------------------------------------------//

        // Method: LoadAndDisplayFiles
        // Loads and displays files from the database
        private void LoadAndDisplayFiles()
        {
            // Get the list of uploaded files from the database
            var uploadedFiles = context.Attachments.ToList();

            // Iterate through each uploaded file
            foreach (var file in uploadedFiles)
            {
                // Add the file details to the UI
                UploadingFilesList.Items.Add(new FileDetail()
                {
                    FileName = file.FileName,
                    FileSize = string.Format("{0} {1}", (file.FileSize).ToString("0.0"), "Mb"),
                    UploadProgress = 100
                });
            }
        }
    }
}

//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____---____---____---____---__\\