using MVA_poe.Classes;
using MVA_Poe;
using MVA_Poe.Classes;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace MVA_poe.Pages
{
    /// <summary>
    /// Interaction logic for Login.xaml
    /// </summary>
    public partial class Login : Page
    {

        // Declare an instance of AppDbContext
        AppDbContext context;

        // Declare an instance of DBHelper
        DBHelper dbHelper;

        // Declare a string for the hashed password
        string hpWord;

        // Declare an instance of the Loading class
        private Loading load;

        // Declare a thread for loading
        private Thread loadingThread;

        // Constructor for the Login class
        public Login()
        {
            // Set the language to English
            SetLanguage("en");

            // Initialize the component (generated by XAML)
            InitializeComponent();

            // Initialize the loading thread
            loadingThread = new Thread(() =>
            {
                // Create and show the loading dialog
                load = new Loading();
                load.ShowDialog();
            });

            // Set the apartment state of the thread to STA
            loadingThread.SetApartmentState(ApartmentState.STA);
        }

        //----------------------------------------------------------------------------//

        // Method: NewThread
        // Initializes a new loading thread
        private void NewThread()
        {
            // Initialize the loading thread
            loadingThread = new Thread(() =>
            {
                // Create and show the loading dialog
                load = new Loading();
                load.ShowDialog();
            });

            // Set the apartment state of the thread to STA
            loadingThread.SetApartmentState(ApartmentState.STA);
        }

        //----------------------------------------------------------------------------//

        // Method: SetLanguage
        // Sets the language for the application based on the culture code
        private void SetLanguage(string cultureCode)
        {
            // Set the current UI culture to the specified culture code
            CultureInfo.CurrentUICulture = new CultureInfo(cultureCode);

            // Create a new ResourceDictionary instance
            ResourceDictionary dict = new ResourceDictionary();

            // Switch based on the culture code
            switch (cultureCode)
            {
                case "af":
                    // Set the source to the Afrikaans resource file
                    dict.Source = new Uri("Resources/Strings.af.xaml", UriKind.Relative);
                    break;
                case "isx":
                    // Set the source to the Icelandic resource file
                    dict.Source = new Uri("Resources/Strings.isx.xaml", UriKind.Relative);
                    break;
                default:
                    // Set the source to the English resource file
                    dict.Source = new Uri("Resources/Strings.en.xaml", UriKind.Relative);
                    break;
            }

            // Add the resource dictionary to the merged dictionaries
            this.Resources.MergedDictionaries.Add(dict);
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Submit button click event
        private void btnSubmit_Click(object sender, RoutedEventArgs e)
        {
            // Get the password from the password box
            String p = txtPas.Password;

            // Check if the email or password field is empty
            if (string.IsNullOrWhiteSpace(txtEmail.Text) || string.IsNullOrWhiteSpace(p))
            {
                // Show an error message if any fields are empty
                MessageBox.Show("\n\n     Please enter your email and password     \n\n");
                return;
            }

            // Hash the password for comparison
            hpWord = HashPassword(ReturnBytes(SecurePasswordBox.GetPassword(txtPas)));

            // Check if the user exists in the database
            bool userExists = PullData();

            // If the user exists
            if (userExists)
            {
                // Check the state of the loading thread and start it if necessary
                if (loadingThread.ThreadState == ThreadState.Stopped || loadingThread.ThreadState == ThreadState.Unstarted)
                {
                    NewThread();
                    loadingThread.Start();
                }

                // Create and show the main window
                MainWindow mainWindow = new MainWindow(dbHelper);
                mainWindow.Show();

                // Sleep for 1 second
                Thread.Sleep(1000);

                // Close the loading dialog and the current window
                load.Dispatcher.Invoke(() => load.Close());
                Window.GetWindow(this).Close();
            }
            else
            {
                // Show an error message if login fails
                MessageBox.Show("Failed to login.\n Please check your email and password.");
            }
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Register link click event
        private void RegisterLink_Click(object sender, RoutedEventArgs e)
        {
            // Navigate to the Register page
            this.NavigationService.Navigate(new Uri("Pages/Register.xaml", UriKind.Relative));
        }

        //----------------------------------------------------------------------------//

        // Method: HashPassword
        // Hashes a password and returns the hashed string
        public static string HashPassword(byte[] passwordArray)
        {
            // Declare a string for the hashed password
            string password;

            // Create a StringBuilder instance
            StringBuilder stringBuilder = new StringBuilder();

            // Iterate through each byte in the password array
            foreach (byte b in passwordArray)
            {
                // Append the byte as a hexadecimal string to the StringBuilder
                stringBuilder.Append(b.ToString("X2"));
            }

            // Convert the StringBuilder to a string
            password = stringBuilder.ToString();

            // Return the hashed password
            return password;
        }

        //----------------------------------------------------------------------------//

        // Method: ReturnBytes
        // Converts a password into a byte array and hashes it
        public static byte[] ReturnBytes(String password)
        {
            // Create an instance of the SHA-256 hashing algorithm
            using (HashAlgorithm algorithm = SHA256.Create())
            {
                // Convert the plaintext password into a byte array using UTF-8 encoding
                byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

                // Compute the hash of the password bytes
                byte[] hashBytes = algorithm.ComputeHash(passwordBytes);

                // Return the resulting hash as a byte array
                return hashBytes;
            }
        }

        //----------------------------------------------------------------------------//

        // Method: PullData
        // Retrieves user data from the database
        public bool PullData()
        {
            // Get the email from the email text box
            string eMail = txtEmail.Text;

            // Get the hashed password
            string pWord = hpWord;

            // Declare a boolean for the login status
            bool loggedIn = false;

            // Create a new instance of AppDbContext
            using (var context = new AppDbContext())
            {
                // Retrieve the user from the database based on the email
                var user = context.Users.SingleOrDefault(u => u.email == eMail);

                // If the user exists
                if (user != null)
                {
                    // Check if the entered password matches the stored hashed password
                    if (pWord == user.pWord)
                    {
                        // Set the login status to true
                        loggedIn = true;

                        // Initialize the DBHelper instance with user details
                        dbHelper = new DBHelper(user.UserId, user.langPref, eMail);
                    }
                }
            }

            // Return the login status
            return loggedIn;
        }
    }
}

//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____---____---____---____---__\\