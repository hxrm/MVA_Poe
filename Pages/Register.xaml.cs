using MVA_poe.Classes;
using MVA_Poe.Classes;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Xml.Linq;

namespace MVA_poe.Pages
{
    /// <summary>
    /// Interaction logic for Register.xaml
    /// </summary>
    public partial class Register : Page
    {
        // Declare an instance of the Valid class
        private Valid v = new Valid();

        // Declare an instance of AppDbContext
        AppDbContext context;

        // Variables for password, email validation, and threads
        string hpWord;
        bool validPWord, validEMail, validFName, validSName, validID, validLoc;

        // Error messages for various fields and Validation instance
        string fNameErrorMessage, sNameErrorMessage, emailErrorMessage, passwordErrorMessage, locErrorMessage, IDErrorMessage;

        // Constructor for the Register class
        public Register()
        {
            // Initialize the component (generated by XAML)
            InitializeComponent();

            // Set the language to English
            SetLanguage("en");

            // Initialize the AppDbContext instance
            context = new AppDbContext();
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Submit button click event
        private void btnSubmit_Click(object sender, RoutedEventArgs e)
        {
            // Gather input data from the form fields
            string firstName = txtName.Text;
            string lastName = txtLastName.Text;
            string email = txtEmail.Text;
            string idNumber = txtID.Text;
            string location = txtLoc.Text;
            string languagePreference = SetLang();
            string password = txtPas.Password;
            string confirmPassword = txtCPas.Password;

            // Check if all input fields are filled
            bool cont = InputCheck(firstName, lastName, email, idNumber, location, password, confirmPassword);
            if (cont == false)
            {
                // Show an error message if any fields are empty
                MessageBox.Show("\n\n    Please fill in all field.   \n\n");
                return;
            }

            // Validate input data (optional)
            ProcessPassword(password, confirmPassword);
            ProcessEmail(email);

            // Validate first name
            validFName = v.TryReceiveString(txtName.Text, out fNameErrorMessage);
            fNameError.Text = fNameErrorMessage;
            fNameError.Visibility = Visibility.Visible;

            // Validate last name
            validSName = v.TryReceiveString(txtLastName.Text, out sNameErrorMessage);
            sNameError.Text = sNameErrorMessage;
            sNameError.Visibility = Visibility.Visible;

            // Validate location
            validLoc = v.TryReceiveString(txtLastName.Text, out locErrorMessage);
            locError.Text = locErrorMessage;
            locError.Visibility = Visibility.Visible;

            // Validate ID
            validID = v.TryReceiveID(txtID.Text, out IDErrorMessage);
            idError.Text = IDErrorMessage;
            idError.Visibility = Visibility.Visible;

            // If all validations pass
            if (validFName && validSName && validEMail && validPWord && validID && validLoc)
            {
                // Hash the password
                hpWord = HashPassword(returnBytes(SecurePasswordBox.GetPassword(txtPas)));

                // Create a new User object
                User newUser = new User
                {
                    fName = firstName,
                    lName = lastName,
                    email = email,
                    ID = idNumber,
                    address = location,
                    langPref = languagePreference,
                    pWord = hpWord // Ensure you handle password hashing in a real application
                };

                // Add the new user to the database
                context.Users.Add(newUser);
                context.SaveChanges();

                // Show a success message and clear the form
                MessageBox.Show("\n\n    User registered successfully!   \n\n");
                ClearForm();

                // Navigate to the Login page
                this.NavigationService.Navigate(new Uri("Pages/Login.xaml", UriKind.Relative));
            }
        }

        //----------------------------------------------------------------------------//

        // Method: InputCheck
        // Checks if all input fields are filled
        private bool InputCheck(string firstName, string lastName, string email, string idNumber, string location, string password, string confirmPassword)
        {
            // Initialize the valid flag to true
            bool valid = true;

            // Check if any input field is empty
            if (string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName) && string.IsNullOrEmpty(email) &&
                string.IsNullOrEmpty(idNumber) && string.IsNullOrEmpty(location) && string.IsNullOrEmpty(password) &&
                string.IsNullOrEmpty(confirmPassword))
            {
                // Set the valid flag to false if any field is empty
                valid = false;
            }

            // Return the valid flag
            return valid;
        }

        //----------------------------------------------------------------------------//

        // Method: SetLanguage
        // Sets the language for the application based on the culture code
        private void SetLanguage(string cultureCode)
        {
            // Set the current UI culture to the specified culture code
            CultureInfo.CurrentUICulture = new CultureInfo(cultureCode);

            // Create a new ResourceDictionary instance
            ResourceDictionary dict = new ResourceDictionary();

            // Switch based on the culture code
            switch (cultureCode)
            {
                case "af":
                    // Set the source to the Afrikaans resource file
                    dict.Source = new Uri("Resources/Strings.af.xaml", UriKind.Relative);
                    break;
                case "isx":
                    // Set the source to the Icelandic resource file
                    dict.Source = new Uri("Resources/Strings.isx.xaml", UriKind.Relative);
                    break;
                default:
                    // Set the source to the English resource file
                    dict.Source = new Uri("Resources/Strings.en.xaml", UriKind.Relative);
                    break;
            }

            // Add the resource dictionary to the merged dictionaries
            this.Resources.MergedDictionaries.Add(dict);
        }

        //----------------------------------------------------------------------------//

        // Method: SetLang
        // Sets the language preference based on the selected index
        public string SetLang()
        {
            // Initialize the language to English
            string lang = "en";

            // Switch based on the selected index
            if (cbLang.SelectedIndex == 0)
            {
                lang = "en";
            }
            if (cbLang.SelectedIndex == 1)
            {
                lang = "af";
            }
            if (cbLang.SelectedIndex == 2)
            {
                lang = "isx";
            }

            // Return the selected language
            return lang;
        }

        //----------------------------------------------------------------------------//

        // Event handler for the Login link click event
        private void LoginLink_Click(object sender, RoutedEventArgs e)
        {
            // Navigate to the Login page
            this.NavigationService.Navigate(new Uri("Pages/Login.xaml", UriKind.Relative));
        }

        //----------------------------------------------------------------------------//

        // Method: ProcessPassword
        // Processes and validates the password
        public void ProcessPassword(string password, string confirm)
        {
            // Initialize the password error message
            string passwordErrorMessage = string.Empty;

            // If password does not match confirmation password
            if (password != confirm)
            {
                // Show an error message if passwords do not match
                conPError.Visibility = Visibility.Visible;
                conPError.Text = "Passwords do not match!";
                return;
            }
            else
            {
                // Validate the password
                validPWord = v.TryReceivePassword(password, out passwordErrorMessage);
                passError.Text = passwordErrorMessage;
                conPError.Visibility = Visibility.Hidden;
                passError.Visibility = Visibility.Visible;
            }
        }

        //----------------------------------------------------------------------------//

        // Method: ProcessEmail
        // Processes and validates the email
        public void ProcessEmail(string email)
        {
            // Initialize the email error message
            string emailErrorMessage = string.Empty;

            // Validate the email
            bool validEmail = v.TryReceiveEmail(email, out emailErrorMessage);
            emailError.Text = emailErrorMessage;
            emailError.Visibility = Visibility.Visible;

            // Remove this line
            validEMail = true;

            // If email is valid
            if (validEmail)
            {
                // Check if the email is already registered
                bool newEmail = CheckData(email);

                // If email is already registered
                if (newEmail)
                {
                    // Show an error message
                    emailError.Text = "Email has already been registered";
                    emailError.Visibility = Visibility.Visible;
                    return;
                }
                else
                {
                    // Set the valid email flag to true
                    this.validEMail = true;
                }
            }
        }

        //----------------------------------------------------------------------------//

        // Method: CheckData
        // Checks if the email is already registered
        public bool CheckData(string email)
        {
            // Initialize the registered flag to false
            bool registered = false;

            // Create a new instance of AppDbContext
            using (var context = new AppDbContext())
            {
                // Check if the email exists in the database using LINQ
                var user = context.Users.FirstOrDefault(u => u.email == email);

                // If user exists, set the registered flag to true
                if (user != null)
                {
                    registered = true;
                }
            }

            // Return the registered flag
            return registered;
        }

        //----------------------------------------------------------------------------//

        // Method: HashPassword
        // Hashes a password and returns the hashed string
        public static string HashPassword(byte[] passwordArray)
        {
            // Initialize the password string
            string password;

            // Create a StringBuilder instance
            StringBuilder stringBuilder = new StringBuilder();

            // Iterate through each byte in the password array
            foreach (byte b in passwordArray)
            {
                // Append the byte as a hexadecimal string to the StringBuilder
                stringBuilder.Append(b.ToString("X2"));
            }

            // Convert the StringBuilder to a string
            password = stringBuilder.ToString();

            // Return the hashed password
            return password;
        }

        //----------------------------------------------------------------------------//

        // Method: returnBytes
        // Converts a password to bytes and hashes it
        public static byte[] returnBytes(string password)
        {
            // Create an instance of the SHA-256 hashing algorithm
            using (HashAlgorithm algorithm = SHA256.Create())
            {
                // Convert the plaintext password into a byte array using UTF-8 encoding
                byte[] passwordBytes = Encoding.UTF8.GetBytes(password);

                // Compute the hash of the password bytes
                byte[] hashBytes = algorithm.ComputeHash(passwordBytes);

                // Return the resulting hash as a byte array
                return hashBytes;
            }
        }

        //----------------------------------------------------------------------------//

        // Method: ClearForm
        // Clears the form fields
        private void ClearForm()
        {
            // Clear the text fields and password fields
            txtName.Text = string.Empty;
            txtLastName.Text = string.Empty;
            txtEmail.Text = string.Empty;
            txtID.Text = string.Empty;
            txtLoc.Text = string.Empty;
            cbLang.SelectedValue = null;
            txtPas.Password = string.Empty;
            txtCPas.Password = string.Empty;

            // Reset the error messages
            Reset();
        }

        //----------------------------------------------------------------------------//

        // Method: Reset
        // Resets the error messages
        public void Reset()
        {
            // Hide the error messages
            fNameError.Visibility = Visibility.Hidden;
            sNameError.Visibility = Visibility.Hidden;
            emailError.Visibility = Visibility.Hidden;
            idError.Visibility = Visibility.Hidden;
            locError.Visibility = Visibility.Hidden;
            passError.Visibility = Visibility.Hidden;
            conPError.Visibility = Visibility.Hidden;
        }
    }
}

//__---____---____---____---____---____---____---__.ooo END OF FILE ooo.__---____---____---____---____---____---____---__\\